<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vectordrawable | Pangff's Blog]]></title>
  <link href="http://www.pffair.com/blog/categories/vectordrawable/atom.xml" rel="self"/>
  <link href="http://www.pffair.com/"/>
  <updated>2021-05-04T21:22:48+08:00</updated>
  <id>http://www.pffair.com/</id>
  <author>
    <name><![CDATA[pangff]]></name>
    <email><![CDATA[540688649@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于矢量路线图动态路径在Android实现方案]]></title>
    <link href="http://www.pffair.com/blog/2016/03/11/svg-android/"/>
    <updated>2016-03-11T12:00:42+08:00</updated>
    <id>http://www.pffair.com/blog/2016/03/11/svg-android</id>
    <content type="html"><![CDATA[<p>最近遇到svg路线图渲染问题，查一些资料总结下解决方案</p>

<!--more-->


<h3>方案一：svg＋VectorDrawable</h3>

<p>优势：</p>

<ul>
<li>Android在5.0以后开始支持VectorDrawable矢量图渲染</li>
<li>Android Support Library 23.2已经提供向下兼容</li>
</ul>


<p>缺点：</p>

<ul>
<li>不是全部svg标签都支持，因为svg本身没有完善规范；所以需要修改svg标签到vector支持的标签这个也有三方库去做转化</li>
<li>不支持动态矢量节点的修改如果要达到路径动态渲染需要内存中修改节点内容，重新渲染到ImageView，速度问题需要验证</li>
<li>大图加载速度问题需要验证</li>
<li>内存问题需要验证</li>
</ul>


<h3>方案二：纯三方库</h3>

<p>AndroidSVG：</p>

<ul>
<li><p>支持svg1.1 － 1.2 大部分标签</p></li>
<li><p>网址: <a href="https://code.google.com/p/androidsvg/">https://code.google.com/p/androidsvg/</a></p></li>
<li><p>最新release:  1.2.2-beta-1 (16 June 2014)，还在维护1.3版本有计划提出</p></li>
<li><p>已知问题：</p>

<ul>
<li>Stroking of underlined or strike through text is not supported in versions of Android prior to 4.2</li>
<li>Android 4.3 bug that breaks the <clipPath> feature when using renderToPicture()</li>
<li>SVGImageView has documented issues in Android Studio</li>
<li>复杂图形渲染和长度限制</li>
</ul>
</li>
<li>例子项目：
<a href="https://github.com/bmarrdev/CountryRank">https://github.com/bmarrdev/CountryRank</a></li>
</ul>


<p>svg-android：</p>

<ul>
<li>svg渲染到canvas上</li>
<li><p>已经废弃，最后更新2012年</p></li>
<li><p>网址: <a href="https://github.com/pents90/svg-android/tree/master/svgandroid">https://github.com/pents90/svg-android/tree/master/svgandroid</a></p></li>
</ul>


<p>svg-android-2：</p>

<ul>
<li><p>修改了svg-android的一些bug</p></li>
<li><p>svg-android的fork版本最后更新在2014,</p></li>
<li>网址: <a href="http://code.google.com/p/svg-android-2/">http://code.google.com/p/svg-android-2/</a></li>
</ul>


<p>TPSVG Android SVG Library</p>

<ul>
<li>速度更快，提供了callback 可以操纵image的节点</li>
<li>2013年最后更新</li>
</ul>


<p>android-pathview:</p>

<ul>
<li>基于androidsvg－1.2.1，在它的基础上进行了修改添加了path动画支持，看了源码，其实是在Canvas回调中获取到全部svg path路径做单独渲染，思路可以借鉴</li>
<li>最后一次更新2016年2月20日 关注961 fork197</li>
<li>网址：<a href="https://github.com/geftimov/android-pathview/commits/master">https://github.com/geftimov/android-pathview/commits/master</a></li>
</ul>


<h3>方案三：自定义图元＋数据＋原生绘制</h3>

<p>优势：</p>

<ul>
<li>这种方式是种一定可以实现的方式，也是一种常规解决方法，全部问题都可控</li>
</ul>


<p>缺点：</p>

<ul>
<li>只针对具体问题，换个项目都要重新编写图元，重用性基本没有</li>
<li>数据到屏幕的点转化是个问题</li>
<li>是否要添加手势操作，手势放大缩小后整个图的渲染细节处理</li>
<li>可能隐含有未知技术问题</li>
</ul>


<h3>总结：</h3>

<ul>
<li>首先尝试VectorDrawable，并结合pathview思路去解决路径动态控制问题</li>
<li>其次尝试基于AndroidSVG项目的 pathview思想</li>
<li>解决问题前两种都失败情况下采用第三种</li>
</ul>

]]></content>
  </entry>
  
</feed>
