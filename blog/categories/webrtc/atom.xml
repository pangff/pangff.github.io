<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webrtc | Pangff's Blog]]></title>
  <link href="http://www.pffair.com/blog/categories/webrtc/atom.xml" rel="self"/>
  <link href="http://www.pffair.com/"/>
  <updated>2021-05-04T21:22:48+08:00</updated>
  <id>http://www.pffair.com/</id>
  <author>
    <name><![CDATA[pangff]]></name>
    <email><![CDATA[540688649@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[webrtc实践]]></title>
    <link href="http://www.pffair.com/blog/2016/06/29/webrtcshi-jian/"/>
    <updated>2016-06-29T15:21:47+08:00</updated>
    <id>http://www.pffair.com/blog/2016/06/29/webrtcshi-jian</id>
    <content type="html"><![CDATA[<p>最近了解了下WebRTC，并使用SimpleWebRTC做了个简单demo，记录下实践过程以及遇到的一些问题。</p>

<!--more-->


<p>想要学习了解webrtc可以通过</p>

<ul>
<li><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#0/">https://codelabs.developers.google.com/codelabs/webrtc-web/#0/</a></li>
<li><a href="https://webrtc.github.io/samples">https://webrtc.github.io/samples</a></li>
</ul>


<p>以及一些WebRTC的demo一步步了解相关API。webrtc也有一些优秀的开源框架</p>

<ul>
<li><a href="http://peerjs.com/">PeerJS</a></li>
<li><a href="https://easyrtc.com/">EasyRTC</a></li>
<li><a href="https://simplewebrtc.com/">SimpleWebRTC</a></li>
</ul>


<p>看过WebRTC一些官方开源sample，简单了解了相关通信机制</p>

<p><img src="http://www.html5rocks.com/en/tutorials/webrtc/basics/jsep.png" alt="jsep" /></p>

<p>两个客户端通过singnal server(信令服务器)获取到各自信息，然后两个客户端通过获取到的对方信息建立peer-to-peer的连接，通过这个连接进行数据传递。</p>

<p>我用的是SimpleWebRTC的一个非常简单demo</p>

<h3>客户端及Web服务</h3>

<p>```
&lt;!DOCTYPE html>
<html>
<head></p>

<script src="https://simplewebrtc.com/latest-v2.js"></script>


<p></head></p>

<p><body></p>

<div id="localVideo" muted></div>


<div id="remoteVideo"></div>




<script>
var webrtc = new SimpleWebRTC({
    localVideoEl: 'localVideo',
    remoteVideosEl: 'remoteVideo',
    autoRequestMedia: true
});

webrtc.on('readyToCall', function () {
    webrtc.joinRoom('My room name');
});
</script>


<p></body></p>

<p></html></p>

<pre><code></code></pre>

<p>var static = require(&lsquo;node-static&rsquo;);
var https = require(&lsquo;https&rsquo;);
var fs = require(&ldquo;fs&rdquo;);
var options = {
  key: fs.readFileSync(&lsquo;./key.pem&rsquo;),
  cert: fs.readFileSync(&lsquo;./cert.pem&rsquo;)
};
var file = new(static.Server)();
var app = https.createServer(options,function (req, res) {
  file.serve(req, res);
}).listen(2013);</p>

<pre><code>
这儿需要注意的是必须使用https协议才可以，如果使用http启动后console会出现错误提示。使用https，key.pem 和 cert.pem是自己生成的。生成方式，下载&lt;https://github.com/andyet/signalmaster/blob/master/scripts/generate-ssl-certs.sh&gt;并运行就可以了，当然也可以直接通过命令，我这是比较偷懒方式。而且signalmaster后面有用到。这时候启动服务。我的服务部在182.xxx.xxx.xxx上

    node server.js

打开chrome浏览器访问&lt;https://182.xxx.xxx.xxx:2013&gt;选择继续前往并运行开启摄像头后，可以在浏览器上看到自己啦...


### 搭建signal server
我们使用的是开源的[signalmaster](https://github.com/andyet/signalmaster)。直接下载，然后运行node server.js就可以。当然默认是测试环境http协议，如果想要使用生产环境https协议启动需要使用 

    $ NODE_ENV=production node server.js 

然后修改客户端代码,添加信令服务器地址
</code></pre>

<p>var webrtc = new SimpleWebRTC({
    localVideoEl: &lsquo;localVideo&rsquo;,
    remoteVideosEl: &lsquo;remoteVideo&rsquo;,
    url:&lsquo;<a href="https://182.xxx.xxx.xxx:8888">https://182.xxx.xxx.xxx:8888</a>&rsquo;,//信令服务器地址
    autoRequestMedia: true
});</p>

<p>```</p>

<p>此时打开chrome的两个标签页，访问<a href="https://182.xxx.xxx.xxx:2013">https://182.xxx.xxx.xxx:2013</a>，会发现除了本人之外多了一个图像区域，一个摄影头看不出来。可以使用在一个局域网内的两台不同设备，我用了Android设备的chrome和Mac的chrome测试，可以看到在自己的画面下方可以看到对方了。</p>

<h3>不同局域网间连通问题</h3>

<p>上面的例子在一个局域网内，或者两个独立外网主机上测试都是可以，但是如果在两个处在不同局域网的主机上测试的话会发现不能连通，这是为什么呢？</p>

<p>先来了解下NAT（Network Address Translation）网络地址转换，也叫做网络掩蔽或者IP掩蔽，是一种在IP封包通过路由器或防火墙时重写来源IP地址或目的IP地址的技术。位于局域网的主机如果要和局域网外主机通信，那么首先需要NAT来将内网IP翻译转换成公网IP；同样外部主机如果要和局域网中的某台主机通信，那么就需要先把目标公网IP转换成目的主机的内网IP。</p>

<p>NAT有几种实现方式，具体的可以看下<a href="http://baike.baidu.com/view/1580678.htm">百科</a>,<a href="https://github.com/andyet/signalmaster">signalmaster</a>采用的是STUN方式和TURN方式，STUN方式网上有很多免费地址<a href="https://github.com/andyet/signalmaster">signalmaster</a>默认用的是</p>

<pre><code>stun:stun.l.google.com:19302
</code></pre>

<p>具体可以参考<a href="https://github.com/andyet/signalmaster">signalmaster</a>源码中config/production.json的stunservers配置。当然网上也有很多<a href="https://gist.github.com/zziuni/3741933">免费的</a>。然而通过百科可以了解到STUN方式不支持对称NAT（而很多公司都是这种方式），所以还是需要配置TURN，见<a href="https://github.com/andyet/signalmaster">signalmaster</a>config/production.json有turnservers配置。看个图</p>

<p>更详细的学习可以参考</p>

<p><a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/">http://www.html5rocks.com/en/tutorials/webrtc/basics/</a></p>

<p>其他:</p>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2</a></li>
<li><a href="http://baike.baidu.com/view/1580678.htm">http://baike.baidu.com/view/1580678.htm</a></li>
<li><a href="https://zh.wikipedia.org/wiki/STUN">https://zh.wikipedia.org/wiki/STUN</a></li>
<li><a href="https://zh.wikipedia.org/wiki/TURN">https://zh.wikipedia.org/wiki/TURN</a></li>
<li><a href="http://blog.inet198.cn/?u012377333/article/details/44455183">http://blog.inet198.cn/?u012377333/article/details/44455183</a></li>
</ul>


<h3>搭建TURN Server</h3>

<p>我是在阿里云Unbuntu上安装的，signalmaster、SimpleWebRTC服务都在一起。服务器ip
182.xxx.xxx.xxx</p>

<pre><code>sudo apt-get update
sudo apt-get install rfc5766-turn-server
</code></pre>

<p>配置turnserver.conf,安装完成后可能每个系统默认turnserver.conf位置不同，所以用find命令搜一下就好了</p>

<pre><code>find / -name turnserver.conf
</code></pre>

<p>然后随便找一个默认文件进行修改，或者自己在某个目录xxx下创建一个turnserver.conf， 修改turnserver.conf，添加如下配置</p>

<pre><code>#中继服务器侦听的IP，如果不写就是全部IPv4 和 Ipv6
#listening-ip=182.xxx.xxx.xxx
#中继服务器侦听端口
listening-port=3478
#tls侦听端口
tls-listening-port=5349
#中继服务器IP
relay-ip=182.xxx.xxx.xxx
#中继服务器处理连接线程数
relay-threads=50

#TURN服务器公开/私有的地址映射,这个适用于服务器在NAT后进行服务器内外网映射,如果不是这种情况可以为空或者公网ip
#external-ip=182.xxx.xxx.xxx

#使用凭证机制
lt-cred-mech

#用户配置
userdb=/etc/turnuserdb.conf

#域配置
realm=pffair.com
pidfile=“/var/run/turnserver.pid”
</code></pre>

<p>turnuser.conf 配置如下</p>

<pre><code>username:password
</code></pre>

<p>启动turnserver</p>

<pre><code>turnserver -c turnserver.conf
</code></pre>

<p>访问<a href="https://182.xxx.xxx.xxx:3478">https://182.xxx.xxx.xxx:3478</a> 此时能看到TUTN Server文本，说明启动成功</p>

<p>然后启动signalmaster server 、SimpleWebRTC server。这时候就可以进行两台不同局域网间主机通信了</p>
]]></content>
  </entry>
  
</feed>
